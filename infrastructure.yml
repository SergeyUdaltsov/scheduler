AWSTemplateFormatVersion: 2010-09-09
Resources:
  usersTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
      TableName: User
  userSessionTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: oId
          AttributeType: N
      KeySchema:
        - AttributeName: oId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
      TableName: UserSession
  settingsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: key
          AttributeType: S
      KeySchema:
        - AttributeName: key
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
      TableName: Settings
  contextTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
      TableName: Context
  BotLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket:
          Ref: LambdaBucket
        S3Key:
          Ref: LambdaArtifact
      FunctionName:
        Ref: BotLambdaName
      Handler: com.teleBot.lambda.BotLambda
      MemorySize: 512
      Role: !GetAtt BotLambdaRole.Arn
      Runtime: java11
      Timeout: 300
  AuthLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket:
          Ref: LambdaBucket
        S3Key:
          Ref: LambdaArtifact
      FunctionName:
        Ref: AuthLambdaName
      Handler: com.teleBot.lambda.AuthLambda
      MemorySize: 512
      Role: !GetAtt BotLambdaRole.Arn
      Runtime: java8
      Timeout: 300
  UiLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket:
          Ref: LambdaBucket
        S3Key:
          Ref: LambdaArtifact
      FunctionName:
        Ref: UiLambdaName
      Handler: com.teleBot.lambda.UiLambda
      MemorySize: 512
      Role: !GetAtt BotLambdaRole.Arn
      Runtime: java11
      Timeout: 300
  EventProcessorLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket:
          Ref: LambdaBucket
        S3Key:
          Ref: LambdaArtifact
      FunctionName:
        Ref: UiLambdaName
      Handler: com.teleBot.lambda.UiLambda
      MemorySize: 512
      Role: !GetAtt BotLambdaRole.Arn
      Runtime: java11
      Timeout: 300
  ArchiveLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket:
          Ref: LambdaBucket
        S3Key:
          Ref: LambdaArtifact
      FunctionName:
        Ref: ArchiveLambdaName
      Handler: com.teleBot.lambda.ArchiveLambda
      MemorySize: 512
      Role: !GetAtt BotLambdaRole.Arn
      Runtime: java11
  BotLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      CompatibleRuntimes:
        - java11
      Content:
        S3Bucket:
          Ref: LayerBucketName
        S3Key:
          Ref: LayerFileName
      Description: Bot lambdas 3rd party dependencies.
      LayerName:
        Ref: LayerName
  MyQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Ref: EventQueueName
  Outputs:
    QueueURL:
      Description: "URL of new Amazon SQS Queue"
      Value:
        Ref: MyQueue
    QueueARN:
      Description: "ARN of new AmazonSQS Queue"
      Value:
        Fn::GetAtt:
          - MyQueue
          - Arn
    QueueName:
      Description: "Name of new Amazon SQS Queue"
      Value:
        Fn::GetAtt:
          - MyQueue
          - QueueName
  LambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt MyQueue.Arn
      FunctionName: !GetAtt LambdaFunction.Arn
  BotLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: lambda_policy_test_api
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:TagResource'
                  - 'dynamodb:UntagResource'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'ssm:*'
                  - 's3:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
  APIGatewayRestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name:
        Ref: APIName
    DependsOn:
      - BotLambda
  APIGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt
        - APIGatewayRestAPI
        - RootResourceId
      PathPart:
        Ref: BotLambdaName
    DependsOn:
      - APIGatewayRestAPI
  APIGatewayResourceAuth:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt
        - APIGatewayRestAPI
        - RootResourceId
      PathPart:
        Ref: AuthLambdaName
    DependsOn:
      - APIGatewayRestAPI
  APIGatewayResourceUiLambda:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt
        - APIGatewayRestAPI
        - RootResourceId
      PathPart:
        Ref: UiLambdaName
    DependsOn:
      - APIGatewayRestAPI
  AuthLambdaPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResourceAuth
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 300
        - StatusCode: 400
        - StatusCode: 500
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt AuthLambda.Arn
    DependsOn:
      - APIGatewayResourceAuth
  AuthLambdaOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResourceAuth
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  UiLambdaPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResourceUiLambda
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 300
        - StatusCode: 400
        - StatusCode: 500
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt UiLambda.Arn
    DependsOn:
      - APIGatewayResourceUiLambda
  UiLambdaOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResourceUiLambda
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  APIGatewayMethodPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 300
        - StatusCode: 400
        - StatusCode: 500
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt BotLambda.Arn
    DependsOn:
      - APIGatewayResource
  APIGatewayMethodGet:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResource
      HttpMethod: GET
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 300
        - StatusCode: 400
        - StatusCode: 500
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt BotLambda.Arn
    DependsOn:
      - APIGatewayResource
  APIGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      StageName:
        Ref: EnvironmentName
    DependsOn:
      - APIGatewayMethodPost
      - APIGatewayMethodGet
      - AuthLambdaPost
      - UiLambdaPost
      - UiLambdaOptions
      - AuthLambdaOptions
  APIGatewayPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt BotLambda.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - APIGatewayDeployment
  AuthLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt AuthLambda.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - AuthLambdaPost
  UiLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt UiLambda.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - UiLambdaPost
  UiBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: coach-helper-ui-bucket-prod
Parameters:
  BotLambdaName:
    Type: String
    Default: bot_lambda
  AuthLambdaName:
    Type: String
    Default: auth_lambda
  UiLambdaName:
    Type: String
    Default: ui_lambda
  ArchiveLambdaName:
    Type: String
    Default: archive_lambda
  LayerBucketName:
    Type: String
    Default: layer-bucket-scheduler
  LayerFileName:
    Type: String
    Default: bot-layer-dependencies.jar
  LayerName:
    Type: String
    Default: 3rd-party-layer
  LambdaBucket:
    Type: String
    Default: coach-helper-lambda-bucket
  LambdaArtifact:
    Type: String
    Default: teleBot-1.0-SNAPSHOT.jar
  EventQueueName:
    Type: String
    Default: event_queue
  APIName:
    Type: String
    Default: botApi
  EnvironmentName:
    Type: String
    Default: prod